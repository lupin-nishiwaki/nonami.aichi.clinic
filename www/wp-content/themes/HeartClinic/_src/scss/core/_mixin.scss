@use "sass:math";
@use "variable" as *;

@mixin fontFamily($type, $important: false) {
  @if $important =='important' or $important ==true {
    $important: ' !important';
  }

  @else {
    $important: '';
  }

  @if $type ==gothic {
    font-family: 'Roboto', 'Noto Sans JP', YuGothic, 'Yu Gothic', 'Meiryo', 'メイリオ', 'MS PGothic', 'ＭＳ Ｐゴシック', sans-serif#{$important};
  }

  @else if $type ==en {
    font-family: 'Roboto', 'Noto Sans JP';
  }

  @else if $type ==serif {
    font-family: '游明朝', 'Yu Mincho', '游明朝体', 'YuMincho', 'ヒラギノ明朝 Pro W3', 'Hiragino Mincho Pro', 'HiraMinProN-W3', 'HGS明朝E', 'ＭＳ Ｐ明朝', 'MS PMincho', serif, sans-serif#{$important};
  }
}

@mixin clearfix() {
  &:after {
    content: "";
    display: block;
    clear: both;
  }
}

@mixin boxRow($count, $top, $left, $sptop) {
  display: grid;
  grid-template-columns: repeat($count, minmax(0, math.div(100%, $count)));
  column-gap: $left;
  row-gap: $top;

  @media #{$breakS} {
    grid-template-columns: repeat(1, minmax(0, 100%));
    row-gap: $sptop;
  }
}

@mixin boxCol($count, $top, $left, $sptop, $spleft) {
  display: grid;
  grid-template-columns: repeat($count, minmax(0, math.div(100%, $count)));
  column-gap: $left;
  row-gap: $top;

  @media #{$breakS} {
    grid-template-columns: repeat(2, minmax(0, 50%));
    column-gap: $spleft;
    row-gap: $sptop;
  }
}

@mixin placeholder($color) {
  &:placeholder-shown {
    color: $color;
  }

  &::-webkit-input-placeholder {
    color: $color;
  }

  &:-moz-placeholder {
    color: $color;
    opacity: 1;
  }

  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    color: $color;
  }
}

@mixin hoverOpacity($opacity) {
  transition: opacity .3s;
  cursor: pointer;

  &:hover {
    opacity: $opacity;
  }
}

@mixin boxCenter() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin boxVerticalCenter() {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

@mixin icoInline() {
  content: "";
  display: inline-block;
  position: relative;
}

@mixin icoPosition() {
  content: "";
  position: absolute;
  margin: auto;
}

@mixin icoLabel() {
  display: inline-block;
  position: relative;
  padding: .5rem 1rem;
  line-height: 1;

  @media #{$breakS} {
    padding: .3rem 1rem;
  }
}

@mixin txtBr() {
  display: block;
  height: 1.5rem;
}

// 第一引数で基準となる画面幅のサイズ、第二引数で基準となる画面幅を入力
// フォントサイズが大きくなりすぎる場合は、メディアクエリで対応。基本htmlに適用して、下層はrem指定。
// 例）@media screen and (min-width: 769px) {}
@function vw($size, $viewport: 375) {
  $rate: math.div(100, $viewport);
  @return $rate * $size * 1vw;
}